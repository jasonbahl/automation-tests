name: Generate Changeset

# This workflow can be triggered in two ways:
# 1. When a pull request is merged to any branch (typically develop or main)
# 2. Manually via the GitHub Actions UI using the workflow_dispatch event
#    - Go to Actions > Generate Changeset > Run workflow
#    - Enter the PR number and click "Run workflow"

on:
  # Using pull_request_target instead of pull_request for security reasons:
  # - Runs in the context of the BASE repository, not the fork
  # - Has access to repository secrets
  # - Can commit changes to protected branches
  # - SECURITY NOTE: Be careful when checking out PR code with this event type
  pull_request_target:
    types: [closed]
    branches:
      - develop
      - 'milestone/**'  # Add support for milestone branches
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to generate changeset for'
        required: true
        type: string
      target_branch:
        description: 'Target branch for the changeset'
        required: false
        default: 'develop'
        type: string

jobs:
  debug-event:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    steps:
      - name: Debug Event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "PR merged: ${{ github.event.pull_request.merged }}"
          echo "Base ref: ${{ github.event.pull_request.base.ref }}"
          echo "Head ref: ${{ github.event.pull_request.head.ref }}"
          echo "PR number: ${{ github.event.pull_request.number }}"
          echo "PR title: ${{ github.event.pull_request.title }}"

  generate-changeset:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: [debug-event]
    if: |
      (github.event_name == 'pull_request_target' && 
       github.event.pull_request.merged == true && 
       !startsWith(github.event.pull_request.head.ref, 'milestone/')) || 
      github.event_name == 'workflow_dispatch'
    env:
      REPO_URL: "https://github.com/${{ github.repository }}"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.base.ref || inputs.target_branch || 'develop' }}
          # Use a personal access token with repo scope for better permissions
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      # Add caching for npm dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
          
      - name: Install dependencies
        # Only run full install if cache miss
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci
        
      # If cache hit, just check for any missing dependencies
      - name: Check dependencies
        if: steps.npm-cache.outputs.cache-hit == 'true'
        run: npm ci --prefer-offline --no-audit
          
      - name: Extract PR information
        id: pr_info
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
          fi
          
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}")
          
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.user.login')
          
          # Use base64 encoding to avoid issues with special characters in PR body
          PR_BODY_BASE64=$(echo "$PR_DATA" | jq -r '.body' | base64 -w 0)
          
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "pr_title=${PR_TITLE}" >> $GITHUB_OUTPUT
          echo "pr_author=${PR_AUTHOR}" >> $GITHUB_OUTPUT
          echo "pr_body_base64=${PR_BODY_BASE64}" >> $GITHUB_OUTPUT
          
      - name: Generate changeset
        run: |
          # Decode the PR body from base64
          PR_BODY=$(echo "${{ steps.pr_info.outputs.pr_body_base64 }}" | base64 --decode)
          
          # Determine source and target branches
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SOURCE_BRANCH=""  # Not available for manual triggers
            TARGET_BRANCH="${{ github.event.inputs.target_branch || 'develop' }}"
          else
            SOURCE_BRANCH="${{ github.event.pull_request.head.ref }}"
            TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"
          fi
          
          # Generate changeset with full branch context
          node scripts/generate-changeset.js \
            --pr="${{ steps.pr_info.outputs.pr_number }}" \
            --title="${{ steps.pr_info.outputs.pr_title }}" \
            --author="${{ steps.pr_info.outputs.pr_author }}" \
            --body="${PR_BODY}" \
            --branch="${TARGET_BRANCH}" \
            --source="${SOURCE_BRANCH}" \
            --target="${TARGET_BRANCH}"
          
          # Commit and push the changeset
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if [[ -n "$(git status --porcelain)" ]]; then
            git add .changesets/
            git commit -m "chore: add changeset for PR #${{ steps.pr_info.outputs.pr_number }}"
            git push
            echo "Changeset created and pushed for PR #${{ steps.pr_info.outputs.pr_number }}"
          else
            echo "No changes to commit"
          fi
          
      - name: Generate release notes
        id: release_notes
        run: |
          # Create temp directory for release notes
          mkdir -p /tmp/release-notes
          
          # Generate release notes based on target branch
          if [[ "${TARGET_BRANCH}" == milestone/* ]]; then
            # For milestone branches, generate milestone-specific notes
            MILESTONE_NAME=$(echo "${TARGET_BRANCH}" | sed 's/^milestone\///')
            node scripts/generate-release-notes.js --milestone="${MILESTONE_NAME}" > /tmp/release-notes/notes.md
          else
            # For develop branch, generate regular release notes
            node scripts/generate-release-notes.js > /tmp/release-notes/notes.md
          fi
          
          # Check if this is a breaking change
          if [[ "${{ steps.pr_info.outputs.pr_title }}" == *"!"* ]] || grep -q "BREAKING[ -]CHANGE:" "${PR_BODY}"; then
            echo "has_breaking_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_breaking_changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Update upgrade notice for breaking changes
        if: steps.release_notes.outputs.has_breaking_changes == 'true'
        run: |
          # Update upgrade notice with breaking change information
          node scripts/update-upgrade-notice.js \
            --notes-file=/tmp/release-notes/notes.md
          
          # Commit upgrade notice changes if any
          if [[ -n "$(git status --porcelain)" ]]; then
            git add readme.txt
            git commit -m "docs: update upgrade notice for breaking changes in PR #${{ steps.pr_info.outputs.pr_number }}"
            git push
          fi
          
      - name: Update changelog
        run: |
          # Update changelog based on target branch
          if [[ "${TARGET_BRANCH}" == milestone/* ]]; then
            # For milestone branches, update both changelog files
            node scripts/update-changelogs.js \
              --notes-file=/tmp/release-notes/notes.md \
              --milestone="${MILESTONE_NAME}"
          else
            # For develop branch, update both changelog files
            node scripts/update-changelogs.js \
              --notes-file=/tmp/release-notes/notes.md
          fi
          
          # Commit changelog changes if any
          if [[ -n "$(git status --porcelain)" ]]; then
            git add CHANGELOG.md readme.txt
            git commit -m "docs: update changelogs for PR #${{ steps.pr_info.outputs.pr_number }}"
            git push
          fi
