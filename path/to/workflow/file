# Read the changelog content from JSON file
CHANGELOG_JSON=$(cat changelog_content.json)

# Create a new PR from develop to main
RESPONSE=$(curl -X POST \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Accept: application/vnd.github.v3+json" \
  "https://api.github.com/repos/wp-graphql/automation-tests/pulls" \
  -d "{
    \"title\": \"release: next version ðŸ“¦\",
    \"head\": \"develop\",
    \"base\": \"main\",
    \"body\": \"## Upcoming Changes\\n\\n${CHANGELOG_JSON}\\n\\nThis PR contains all changes that will be included in the next release. It is automatically updated when new changesets are added to the develop branch.\"
  }")

# Print full response for debugging
echo "Full API Response:"
echo "$RESPONSE" | jq '.'

# Check for error messages
ERROR_MESSAGE=$(echo "$RESPONSE" | jq -r '.message // "No error message"')
if [[ "$ERROR_MESSAGE" != "No error message" ]]; then
  echo "Error creating PR: $ERROR_MESSAGE"
  
  # Check for more detailed errors
  ERRORS=$(echo "$RESPONSE" | jq -r '.errors // []')
  if [[ "$ERRORS" != "[]" ]]; then
    echo "Detailed errors: $ERRORS"
  fi
  
  exit 1
fi

PR_NUMBER=$(echo "$RESPONSE" | jq -r '.number')

if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
  echo "Failed to create PR. No PR number returned."
  exit 1
else
  echo "Created new release PR #${PR_NUMBER} with initial changelog"
fi 